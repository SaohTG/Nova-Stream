version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: nova
      POSTGRES_PASSWORD: changeme
      POSTGRES_DB: novastream
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - db_data_ns6:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nova -d novastream"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks: [webnet]

  api:
    image: node:20-alpine
    working_dir: /app
    environment:
      DATABASE_URL: postgresql://nova:changeme@db:5432/novastream
      PORT: 4000
      API_PORT: 4000
      HOST: 0.0.0.0
      # Front autorisÃ© (domaine) + optionnel IP:5173 si tests directs
      CORS_ORIGIN: https://lector.lorna.tv,http://85.31.239.110:5173
      COOKIE_SECURE: "true"
      COOKIE_SAMESITE: none
      TMDB_API_KEY: d8175301037c00f3c719478998396539
      NODE_ENV: production
      NPM_CONFIG_PRODUCTION: "false"
      # >>> SECRETS INDISPENSABLES <<<
      API_JWT_SECRET: Y7dD6Vh2mC4pQ8tR1sX9zK3wL5aN0fB2gU4hJ6iO8lT1qP3dV
      API_REFRESH_SECRET: 9uU6sT4rQ2pO0nM7lK5jH3gF1dC9bA7Z5X3V1T
      API_JWT_ACCESS_TTL: "900"
      API_JWT_REFRESH_TTL: "1209600"
    command:
      - sh
      - -lc
      - |
        set -e
        apk add --no-cache unzip curl netcat-openbsd
        until nc -z db 5432; do echo 'waiting for db...'; sleep 2; done
        rm -rf /tmp/Nova-Stream-main /tmp/src.zip
        curl -L https://github.com/SaohTG/Nova-Stream/archive/refs/heads/main.zip -o /tmp/src.zip
        unzip -o -q /tmp/src.zip -d /tmp
        rm -rf /app/*
        cp -r /tmp/Nova-Stream-main/api/. /app
        npm install --include=dev --no-audit --no-fund
        npm run build
        node dist/main.js
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:4000/health >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 60s
    networks: [webnet]
    restart: unless-stopped

  web:
    image: node:20-alpine
    working_dir: /app
    environment:
      VITE_API_BASE: /api
      NODE_ENV: production
      NPM_CONFIG_PRODUCTION: "false"
    command:
      - sh
      - -lc
      - |
        set -e
        apk add --no-cache unzip curl
        rm -rf /tmp/Nova-Stream-main /tmp/src.zip
        curl -L https://github.com/SaohTG/Nova-Stream/archive/refs/heads/main.zip -o /tmp/src.zip
        unzip -o -q /tmp/src.zip -d /tmp
        rm -rf /app/*
        cp -r /tmp/Nova-Stream-main/web/. /app
        # package.json minimal
        printf '%s\n' '{ "name":"nova-stream-web","version":"0.1.0","private":true,"type":"module","scripts":{"dev":"vite","build":"vite build","preview":"vite preview"}, "dependencies":{"axios":"^1.6.7","hls.js":"^1.5.7","react":"^18.2.0","react-dom":"^18.2.0","react-router-dom":"^6.26.2"}, "devDependencies":{"@vitejs/plugin-react":"^4.2.0","autoprefixer":"^10.4.17","postcss":"^8.4.35","tailwindcss":"^3.4.6","vite":"^5.0.0"} }' > /app/package.json
        # vite.config.js
        printf '%s\n' 'import { defineConfig } from "vite"; import react from "@vitejs/plugin-react"; export default defineConfig(({ mode })=>({ plugins:[react()], server:{ host:true, port:5173, allowedHosts:["lector.lorna.tv"] }, preview:{ host:true, port:5173, allowedHosts:["lector.lorna.tv"] } }));' > /app/vite.config.js
        npm install --include=dev --no-audit --no-fund
        npm run build
        npm run preview -- --host 0.0.0.0 --port 5173
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "5173:5173"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5173/ >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 20s
    networks: [webnet]
    restart: unless-stopped

volumes:
  db_data_ns6: {}

networks:
  webnet:
    driver: bridge
