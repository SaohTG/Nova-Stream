version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: nova
      POSTGRES_PASSWORD: changeme
      POSTGRES_DB: novastream
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      TZ: Europe/Brussels
    volumes:
      - db_data_ns6:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nova -d novastream"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks: [webnet]

  api:
    image: node:20-alpine
    init: true
    working_dir: /app
    environment:
      DATABASE_URL: postgresql://nova:changeme@db:5432/novastream
      PORT: 4000
      API_PORT: 4000
      HOST: 0.0.0.0
      TZ: Europe/Brussels
      # CORS: même origine (app.lorna.tv) + options de test
      CORS_ORIGIN: https://app.lorna.tv,https://lector.lorna.tv,http://85.31.239.110:5173
      COOKIE_SECURE: "true"
      COOKIE_SAMESITE: none
      TMDB_API_KEY: d8175301037c00f3c719478998396539
      NODE_ENV: production
      NPM_CONFIG_PRODUCTION: "false"
      API_JWT_SECRET: Y7dD6Vh2mC4pQ8tR1sX9zK3wL5aN0fB2gU4hJ6iO8lT1qP3dV
      API_REFRESH_SECRET: 9uU6sT4rQ2pO0nM7lK5jH3gF1dC9bA7Z5X3V1T
      API_JWT_ACCESS_TTL: "900"
      API_JWT_REFRESH_TTL: "1209600"
      API_ENCRYPTION_KEY: "a1b2c3d4e5f60718293a4bc5de6f70819a2b3c4d5e6f7a801f2e3d4c9b8a7c6d"
      # si votre serveur Xtream est en HTTPS auto-signé:
      XTREAM_INSECURE_TLS: "1"
    command:
      - sh
      - -lc
      - |
        set -e
        apk add --no-cache unzip curl netcat-openbsd
        until nc -z db 5432; do echo 'waiting for db...'; sleep 2; done
        rm -rf /tmp/Nova-Stream-main /tmp/src.zip
        curl -L https://github.com/SaohTG/Nova-Stream/archive/refs/heads/main.zip -o /tmp/src.zip
        unzip -o -q /tmp/src.zip -d /tmp
        rm -rf /app/*
        cp -r /tmp/Nova-Stream-main/api/. /app
        npm install --include=dev --no-audit --no-fund
        npm run build
        node dist/main.js
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:4000/health || curl -fsS http://127.0.0.1:4000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60
      start_period: 120s
    networks: [webnet]
    restart: unless-stopped

  web:
    image: nginx:alpine
    init: true
    working_dir: /usr/share/nginx/html
    environment:
      TZ: Europe/Brussels
      VITE_API_BASE: /api
    command:
      - sh
      - -lc
      - |
        set -e
        apk add --no-cache nodejs npm curl unzip
        rm -rf /tmp/Nova-Stream-main /tmp/src.zip
        curl -L https://github.com/SaohTG/Nova-Stream/archive/refs/heads/main.zip -o /tmp/src.zip
        unzip -o -q /tmp/src.zip -d /tmp
        rm -rf /app; mkdir -p /app
        cp -r /tmp/Nova-Stream-main/web/. /app
        cd /app
        # package minimal pour build
        printf '%s\n' '{ "name":"nova-stream-web","private":true,"type":"module","scripts":{"build":"vite build"}, "dependencies":{"axios":"^1.6.7","hls.js":"^1.5.7","react":"^18.2.0","react-dom":"^18.2.0","react-router-dom":"^6.26.2"}, "devDependencies":{"@vitejs/plugin-react":"^4.2.0","autoprefixer":"^10.4.17","postcss":"^8.4.35","tailwindcss":"^3.4.6","vite":"^5.0.0"} }' > package.json
        # vite config pour build statique (API en /api)
        cat > vite.config.js <<'EOF'
        import { defineConfig } from "vite";
        import react from "@vitejs/plugin-react";
        export default defineConfig(({ mode }) => ({
          plugins:[react()],
          base: "/",
          define: { "import.meta.env.VITE_API_BASE": JSON.stringify(process.env.VITE_API_BASE || "/api") },
          build: { outDir: "dist", sourcemap: false }
        }));
        EOF
        npm i --include=dev --no-audit --no-fund
        npm run build
        rm -rf /usr/share/nginx/html/*
        cp -r dist/* /usr/share/nginx/html/
        # nginx conf SPA + port 8081
        cat > /etc/nginx/conf.d/default.conf <<'NGINX'
        server {
          listen 8081;
          server_name _;
          root /usr/share/nginx/html;
          index index.html;
          charset utf-8;

          # SPA
          location / {
            try_files $uri $uri/ /index.html;
          }
        }
        NGINX
        nginx -g 'daemon off;'
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8081/ >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 20s
    networks: [webnet]
    restart: unless-stopped

volumes:
  db_data_ns6: {}

networks:
  webnet:
    driver: bridge
